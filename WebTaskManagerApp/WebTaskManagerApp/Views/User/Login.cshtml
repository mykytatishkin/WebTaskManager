@model WebTaskManagerApp.Models.User

@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Login</h1>
<hr />

<div id="gradient" />

<div class="container md">
    <div class="row justify-content-center align-items-center">
        <div class="col-md-4 row justify-content-center align-items-center">
            <div class="btn-group" role="group" aria-label="Basic example">
                <button type="button" class="btn btn-light" name="UsernameButton">Username</button>
                <button type="button" class="btn btn-light" name="EmailButton">Email</button>
            </div>
            <form asp-action="Login">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label name="LoginLabel" asp-for="Name" class="control-label"></label>
                    <input name="LoginInput" asp-for="Name" class="form-control" />
                    <span  name="LoginSpan" asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Password" class="control-label"></label>
                    <input type="password" asp-for="Password" class="form-control" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                &nbsp;
                <div class="form-group row justify-content-center align-items-center">
                    <input style="width: 50%" type="submit" value="Login" class="btn btn-light" />
                </div>
            </form>
        </div>
    </div>
</div>

<div class="row justify-content-center align-items-center">
    Don`t have an account? <a asp-action="Registration" class="row justify-content-center align-items-center">Register it now!</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script>
    const usernameButton = document.querySelector('button[name="UsernameButton"]');
    const emailButton = document.querySelector('button[name="EmailButton"]');

    const label = document.querySelector('label[name="LoginLabel"]');
    const input = document.querySelector('input[name="LoginInput"]');
    const span = document.querySelector('span[name="LoginSpan"]');

    usernameButton.addEventListener('click', function () {
        console.log("usernameButton()")

        label.setAttribute('asp-for', 'Name');
        input.setAttribute('asp-for', 'Name');
        span.setAttribute('asp-validation-for', 'Name');
        form.setAttribute('asp-action', 'Name');
    });

    emailButton.addEventListener('click', function () {
        console.log("emailButton()")

        label.setAttribute('asp-for', 'Email');
        input.setAttribute('asp-for', 'Email');
        span.setAttribute('asp-validation-for', 'Email');
        form.setAttribute('asp-action', 'Email');
    });





    var colors = new Array(
        [62, 35, 255],
        [60, 255, 60],
        [255, 35, 98],
        [45, 175, 230],
        [255, 0, 255],
        [255, 128, 0]);

    var step = 0;
    //color table indices for:
    // current color left
    // next color left
    // current color right
    // next color right
    var colorIndices = [0, 1, 2, 3];

    //transition speed
    var gradientSpeed = 0.002;

    function updateGradient() {

        if ($ === undefined) return;

        var c0_0 = colors[colorIndices[0]];
        var c0_1 = colors[colorIndices[1]];
        var c1_0 = colors[colorIndices[2]];
        var c1_1 = colors[colorIndices[3]];

        var istep = 1 - step;
        var r1 = Math.round(istep * c0_0[0] + step * c0_1[0]);
        var g1 = Math.round(istep * c0_0[1] + step * c0_1[1]);
        var b1 = Math.round(istep * c0_0[2] + step * c0_1[2]);
        var color1 = "rgb(" + r1 + "," + g1 + "," + b1 + ")";

        var r2 = Math.round(istep * c1_0[0] + step * c1_1[0]);
        var g2 = Math.round(istep * c1_0[1] + step * c1_1[1]);
        var b2 = Math.round(istep * c1_0[2] + step * c1_1[2]);
        var color2 = "rgb(" + r2 + "," + g2 + "," + b2 + ")";

        $('body').css({
            background: "-webkit-gradient(linear, left top, right top, from(" + color1 + "), to(" + color2 + "))"
        }).css({
            background: "-moz-linear-gradient(left, " + color1 + " 0%, " + color2 + " 100%)"
        });

        step += gradientSpeed;
        if (step >= 1) {
            step %= 1;
            colorIndices[0] = colorIndices[1];
            colorIndices[2] = colorIndices[3];

            //pick two new target color indices
            //do not pick the same as the current one
            colorIndices[1] = (colorIndices[1] + Math.floor(1 + Math.random() * (colors.length - 1))) % colors.length;
            colorIndices[3] = (colorIndices[3] + Math.floor(1 + Math.random() * (colors.length - 1))) % colors.length;

        }
    }

    setInterval(updateGradient, 10);
</script>

<style>
    body {
        /*background-color: #000000;*/
        padding: 0px;
        margin: 0px;
    }

    #gradient {
        width: 100%;
        height: 800px;
        padding: 0px;
        margin: 0px;
    }


</style>
